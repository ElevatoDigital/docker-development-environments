##############################################
# PHP App Container
##############################################
#
# Creates a PHP container for hosting
# WordPress and other PHP sites. See
# docker-compose.yml for usage.
#

# container
# reference: https://github.com/docker-library/docs/blob/master/php/README.md
FROM php:8.3-apache

# app directory on the container
WORKDIR /var/www/vhosts/myvhost

# volume directory for source code
VOLUME ["/var/www/vhosts/myvhost"]
VOLUME ["/var/www/vhosts/myvhost/private/deploy.php"]

# install additional apache modules
RUN a2enmod rewrite

# install additional packages
RUN apt-get update \
&& apt-get upgrade -y \
&& apt-get install -y \
    curl \
    cron \
    dos2unix \
    git \
    libzip-dev \
    libpq-dev \
    libxml2-dev \
    less \
    net-tools \
    rsync \
    sudo \
    imagemagick \
    libmagickwand-dev \
    libmemcached-dev \
    python-is-python3 \
    python-dev-is-python3 \
    virtualenv \
    supervisor \
    vim \
    unzip \
    wget

# install python2 pip
RUN wget https://bootstrap.pypa.io/pip/2.7/get-pip.py \
&& python get-pip.py

# install pip packages
RUN python -m pip install future

# install nodejs 17
RUN curl -fsSL https://deb.nodesource.com/setup_17.x | bash - \
    && apt-get update \
    && apt-get upgrade -y \
    && apt-get install -y nodejs build-essential npm

# install libssl1.1
# https://askubuntu.com/questions/1403619/mongodb-install-fails-on-ubuntu-22-04-depends-on-libssl1-1-but-it-is-not-insta
RUN wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.0g-2ubuntu4_amd64.deb \
    && dpkg -i ./libssl1.1_1.1.0g-2ubuntu4_amd64.deb

# install wkhtmltopdf
RUN wget https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.bullseye_amd64.deb \
    && apt install -y ./wkhtmltox_0.12.6.1-2.bullseye_amd64.deb

# install additional php extensions
RUN docker-php-ext-install \
    bcmath \
    calendar \
    gd \
    gettext \
    intl \
    mysqli \
    opcache \
    pcntl \
    pdo \
    pdo_mysql \
    pdo_pgsql \
    soap \
    sockets \
    zip

# configure additional php extensions
RUN docker-php-ext-configure pcntl --enable-pcntl
RUN docker-php-ext-configure intl --enable-intl

# adjust permissions
RUN chown -R www-data:www-data /var/www/vhosts/myvhost

# install pecl extensions
RUN pecl install apcu
RUN pecl install memcached

# php customizations
VOLUME ["/usr/local/etc/php/conf.d/custom.ini"]

# composer
RUN php -r "copy('https://getcomposer.org/installer', '/root/composer-setup.php');"
RUN php /root/composer-setup.php --install-dir=/usr/local/bin --filename=composer
RUN php -r "unlink('/root/composer-setup.php');"

# deployer
RUN curl -LO --output-dir /root https://github.com/deployphp/deployer/releases/download/v7.0.2/deployer.phar
RUN mv /root/deployer.phar /usr/local/bin/dep
RUN chmod +x /usr/local/bin/dep

# gelf tunnel
COPY includes/ssh/config /root/.ssh/
RUN chmod 600 /root/.ssh/config
COPY includes/gelf/enable_gelf_tunnel.sh /usr/local/sbin/
RUN dos2unix /usr/local/sbin/enable_gelf_tunnel.sh

# gelf key
VOLUME ["/root/.ssh/gelf.key.mounted"]
RUN if [ -f "/root/.ssh/gelf.key.mounted" ]; then chmod 600 /root/.ssh/gelf.key.mounted; fi

# supervisor config
VOLUME ["/etc/supervisor/conf.d"]

# crontab config
#VOLUME ["/etc/cron.d/crontab"]

# add cron support to cmd script
#RUN sed -i 's/^exec /crontab \/etc\/cron.d\/crontab\nservice cron start\n\nexec /' /usr/local/bin/apache2-foreground

# configure environment variables
# reference: https://github.com/docker-library/docs/blob/master/php/README.md#changing-documentroot
ENV APACHE_DOCUMENT_ROOT /var/www/vhosts/myvhost/httpdocs
RUN sed -ri -e 's!/var/www/html!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/sites-available/*.conf
RUN sed -ri -e 's!/var/www/!${APACHE_DOCUMENT_ROOT}!g' /etc/apache2/apache2.conf /etc/apache2/conf-available/*.conf

# run on port 80
EXPOSE 80
